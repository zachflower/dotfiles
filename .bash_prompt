RESET="\033[0m"
BLACK="\033[0;30m"
GRAY="\033[1;30m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
GREEN="\033[1;32m"
ORANGE="\033[1;33m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
VIOLET="\033[1;35m"
WHITE="\033[1;37m"

parse_git_branch() {
	local BRANCH=`git branch 2>/dev/null| sed -n '/^\*/s/^\* //p'`
	local BRANCHCOLOR=$GRAY;
	local STATUS=""

	if [ -z $BRANCH ]; then
    return
	else
    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
        if ! $(git diff --quiet --ignore-submodules --cached); then
          # check for uncommitted changes in the index.
          BRANCHCOLOR=$YELLOW;
        elif ! $(git diff-files --quiet --ignore-submodules --); then
          # check for unstaged changes.
          BRANCHCOLOR=$GREEN;
        elif [ -n "$(git ls-files --others --exclude-standard)" ]; then
          # check for untracked files.
          BRANCHCOLOR=$BLUE;
        fi

        # check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
          BRANCH+="*";
        fi

        # do we need to push?
        if $(git status | grep "ahead" &>/dev/null); then
          STATUS+="â–²";
        fi

        [ -n "${STATUS}" ] && STATUS=" ${STATUS}"
    fi

		echo -e " ${RESET}(${BRANCHCOLOR}${BRANCH}${STATUS}${RESET})"
	fi
}

PS1="\n${RESET}[${GRAY}\$(date +%R)${RESET}]${GRAY}-${RESET}[${GRAY}\u${RESET}@${GRAY}\h${RESET}]${GRAY}-${RESET}[${GRAY}\w${RESET}]${GRAY}\$(parse_git_branch)${RESET} \n\$ "
