# shellcheck shell=bash
# vi: ft=bash

export RESET="\033[0m"
export BLACK="\033[0;30m"
export GRAY="\033[1;30m"
export BLUE="\033[1;34m"
export CYAN="\033[1;36m"
export GREEN="\033[1;32m"
export ORANGE="\033[1;33m"
export YELLOW="\033[1;33m"
export RED="\033[1;31m"
export VIOLET="\033[1;35m"
export WHITE="\033[1;37m"

parse_git_branch() {
  BRANCH=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
	BRANCHCOLOR=$GRAY
  STATUS=""

	if [ -z "$BRANCH" ]; then
    return
	else
    # check if the current directory is in .git before running git checks
    IS_INSIDE_GIT_DIR=$(git rev-parse --is-inside-git-dir 2>/dev/null)

    if [ "$IS_INSIDE_GIT_DIR" == 'false' ]; then
        UNTRACKED=$(git ls-files --others --exclude-standard 2>/dev/null)
        PUSHABLE=$(git status | grep "ahead" 2>/dev/null)
        PULLABLE=$(git status | grep "behind" 2>/dev/null)

        if ! git diff --quiet --ignore-submodules --cached &>/dev/null; then
          # check for uncommitted changes in the index.
          BRANCHCOLOR=$YELLOW;
        elif ! git diff-files --quiet --ignore-submodules -- &>/dev/null; then
          # check for unstaged changes.
          BRANCHCOLOR=$GREEN;
        elif [ -n "$UNTRACKED" ]; then
          # check for untracked files.
          BRANCHCOLOR=$BLUE;
        fi

        # check for stashed files.
        if git rev-parse --verify refs/stash &>/dev/null; then
          BRANCH+="*";
        fi

        # do we need to push?
        if [ -n "$PUSHABLE" ]; then
          STATUS+="▲";
        fi
        
        if [ -n "$PULLABLE" ]; then
          STATUS+="▼"
        fi

        [ -n "${STATUS}" ] && STATUS=" ${STATUS}"
    fi

		echo -e " ${RESET}(${BRANCHCOLOR}${BRANCH}${STATUS}${RESET})"
	fi
}

PS1="\n${RESET}[${GRAY}\$(date +%R)${RESET}]${GRAY}-${RESET}[${GRAY}\u${RESET}@${GRAY}\h${RESET}]${GRAY}-${RESET}[${GRAY}\w${RESET}]${GRAY}\$(parse_git_branch)${RESET} \n\$ "
